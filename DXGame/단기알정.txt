

맵 수정사항
레벨 연결










 




맵추가 제작 2일




애니마

카메라 수정 카메라 흔들림 

갓다와서

보스맵 수정


궁극기 1일

사운드 3일

마지막 맵


시작맵 제작 기본 사진에 애니메이션 귀신 추가 이나 






시간 남으면 

블러처리

사다리

대쉬 이펙트

이동 UI

무기 UI

강공격
강대쉬





완료



정보값 입력 데미지 수치 체력 등

데미지 표기 1일

저주UI

소울 획득 이펙트

체력감소 효과 

피격효과


로딩화면 

몬스터 피격 넉백 이펙트

몬스터 출현 기믹
페이퍼월 
픽셀충돌로 이동막기
몬스터도
이펙트추가
다죽었는지 체크하고 보상 출현

플레이 UI 미지수

시작화면 1시간



아이템 획득

무기 제작 3일

광원 그림자

공격마다 피봇설정을 달리해서 어색함없이 피봇이 작동하게 만들기 
기본값을 중앙으로 두기 공격할떄 아이들값의 절반 만큼 비율을 계산해서 피봇에 곱해주는 방식?

대쉬 함수
피봇값 애니 데이터에 넣고 체인지마다 적용되게 만들기
플립될때 피봇에 맞게 위치값 바꾸기


몬스터
고스트우먼
따라다니는 책

피격판정
슈퍼아머

배경맵 오브젝트 배치용 GUI 제작

골리전 처리
배경맵 원근감 만들기
몬스터 배경맵 배치

보스맵 제작

보스

맵 포토샵제작



물체가 블랙홀을 향해 나선형으로 빨려 들어가는 것과 유사하게 치유 공이 대상 주위를 회전하면서 빨려 들어가는 효과를 만들려면 방사형 안쪽 움직임과 접선 운동을 결합하여 나선형 궤적을 만들면 됩니다. 다음은 간단한 접근 방식입니다:

1. **방사형 안쪽 이동**: 이것은 중력의 당김을 시뮬레이션하여 대상을 향해 직접 이동하는 움직임입니다.

2. **탄젠셜 모션**: 방사형 방향에 수직인 모션으로, 목표물에 가까워질수록 치유 공이 목표물 주위를 회전합니다.

다음은 DirectX를 사용하여 이 개념을 보여주는 C++ 함수입니다:

```cpp
void SpiralIntoTarget(HealingBall& ball, const XMFLOAT3& targetPosition, float deltaTime) {
    static const float SPIRAL_FACTOR = 0.5f; // 나선의 팽팽함을 제어합니다.
    static const float INWARD_PULL = 5.0f; // 안쪽으로 당기는 힘을 제어합니다.

    XMVECTOR ballPos = XMLoadFloat3(&ball.position);
    XMVECTOR targetPos = XMLoadFloat3(&targetPosition);

    // 정규화된 방향 벡터 계산
    XMVECTOR toTargetVector = XMVectorSubtract(targetPos, ballPos);
    XMVECTOR toTargetNormalized = XMVector3Normalize(toTargetVector);
    XMVECTOR 탄젠셜디렉션 = XMVectorSet(-XMVectorGetY(toTargetNormalized), XMVectorGetX(toTargetNormalized), 0.0f, 0.0f);

    // 공에서 목표 위치까지의 거리 계산
    float distanceToTarget = XMVectorGetX(XMVector3Length(toTargetVector));

    // 거리를 기준으로 탄젠셜 회전 속도 계산 (가까울수록 빠름)
    float 탄젠셜스피드 = SPIRAL_FACTOR / distanceToTarget;

    // 속도에 안쪽 당김과 탄젠셜 스핀을 추가합니다.
    ball.velocity = XMVectorMultiplyAdd(XMVectorScale(toTargetNormalized, -INWARD_PULL * deltaTime), ball.velocity);
    ball.velocity = XMVectorMultiplyAdd(XMVectorScale(tangentialDirection, tangentialSpeed * deltaTime), ball.velocity);

    // 속도에 따라 위치를 업데이트하고 목표에 매우 가까우면 클램프합니다.
    if (distanceToTarget > 1.0f) {
        ball.position += ball.velocity * deltaTime;
    } else {
        // 목표 위치에 고정하고 이동 중지
        ball.position = targetPosition;
        ball.isPickedUp = false; // 치유 공이 목적지에 도달했습니다.
        반환합니다;
    }

    // 안정성을 위해 매 프레임마다 속도를 약간 감속합니다.
    float 댐핑팩터 = 0.98f;
    ball.velocity *= 댐핑팩터;
}

```

이 예제에서는
- SPIRAL_FACTOR`는 물체가 중심을 향해 얼마나 세게 나선형을 그리는지를 제어하며, 값이 작을수록 더 세게 나선형을 그리게 됩니다.
- INWARD_PULL`은 안쪽으로 끌어당기는 중력의 강도를 결정합니다.
- 탄젠셜 방향`은 정규화된 벡터가 다음을 향하도록 회전하여 계산됩니다. 가까워질 때 시각적으로 매력적인 호를 만들 수 있습니다.