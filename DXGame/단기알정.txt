



버그 및 사소한

필드 애니마 깔기
 
저주 페이드 추가 ㅇ
저주 효과 배치 무기 ㅇ
궁극기 UI o
고스트매드 사운드  d
디버그 데미지 증가 0
화면흔들림 추가  ㅇ
보스 엔딩 y값 모션 ㅇ 
보스 스핀 고정 ㅇ
보스 콤보 사운드  ㅇ
레벨변경할떄 소리끄기 ㅇ
배경음악이펙트 녹음  ㅇ
문 위치 ㅇ 
보스맵 앞쪽 Z값수정 ㅇ
맵 빈공간 수정 ㅇ

엔딩 로드 사운드 o 
보스 카메라 스무스 ㅇ
대쉬 쿨타임 o

몬스터 시전 쿨타임 o 

점프 공격 횟수



궁극기 1일

사운드 3일

사운드 찾기

시작레벨 ㅇ
 
몬스터 공격 공격시전 ㅇ

피격 ㅇ
타격 ㅇ


기믹  
책 등장 ㅇ
몬스터소환 ㅇ
무기등장 ㅇ
무기 획득 ㅇ


애니마획득  ㅇ
ui기록 ㅇ
사용 ㅇ


소울리마 
획득 ㅇ



저주획득
ui


궁극기






마지막 맵


시작맵 제작 기본 사진에 애니메이션 귀신 추가 이나 






시간 남으면 

블러처리

사다리

대쉬 이펙트

이동 UI

무기 UI

강공격
강대쉬





완료


보스맵 수정

벽설치

마무리이펙트
마무리 무빙

포징 이펙트
바위 이펙트
캐릭터 위치 
맵 대가리



맵 수정사항
레벨 연결




맵추가 제작 2일




애니마
카메라 수정 카메라 흔들림 


정보값 입력 데미지 수치 체력 등

데미지 표기 1일

저주UI

소울 획득 이펙트

체력감소 효과 

피격효과


로딩화면 

몬스터 피격 넉백 이펙트

몬스터 출현 기믹
페이퍼월 
픽셀충돌로 이동막기
몬스터도
이펙트추가
다죽었는지 체크하고 보상 출현

플레이 UI 미지수

시작화면 1시간



아이템 획득

무기 제작 3일

광원 그림자

공격마다 피봇설정을 달리해서 어색함없이 피봇이 작동하게 만들기 
기본값을 중앙으로 두기 공격할떄 아이들값의 절반 만큼 비율을 계산해서 피봇에 곱해주는 방식?

대쉬 함수
피봇값 애니 데이터에 넣고 체인지마다 적용되게 만들기
플립될때 피봇에 맞게 위치값 바꾸기


몬스터
고스트우먼
따라다니는 책

피격판정
슈퍼아머

배경맵 오브젝트 배치용 GUI 제작

골리전 처리
배경맵 원근감 만들기
몬스터 배경맵 배치

보스맵 제작

보스

맵 포토샵제작



화면 흔들림에 보다 자연스러운 흔들림 효과를 만들려면 사인파와 같은 부드러운 함수를 사용하여 시간에 따른 움직임을 조절할 수 있습니다. 이렇게 하면 무작위 지터 대신 효과가 지속되는 동안 감소하는 부드러운 파도 같은 움직임을 생성합니다.

먼저 이를 지원하도록 `ScreenShake` 구조체를 조정해 보겠습니다:

```cpp
구조체 ScreenShake {
    float duration; // 흔들림이 지속되는 시간
    float magnitude; // 흔들림의 세기
    float elapsed; // 흔들림이 지속된 시간 타이머
    float frequency; // 흔들림의 빈도
};

ScreenShake screenShake = {0.0f, 0.0f, 0.0f, 2.0f}; // 기본 주파수로 초기화합니다.
```

이제 새로운 화면 흔들림을 설정하기 위해 `StartScreenShake` 함수를 수정해 보겠습니다:

```cpp
void StartScreenShake(float duration, float magnitude, float frequency) {
    screenShake.duration = duration;
    screenShake.magnitude = magnitude;
    screenShake.frequency = frequency;
    screenShake.elapsed = 0.0f;
}
```

다음으로 화면 흔들기 로직을 업데이트하여 더 부드러운 흔들림을 통합합니다:

```cpp
void UpdateScreenShake(float deltaTime, XMMATRIX& viewMatrix) {
    if (screenShake.elapsed < screenShake.duration) {
        // 흔들기가 얼마나 남았는지 계산합니다.
        float timeLeft = (screenShake.duration - screenShake.elapsed) / screenShake.duration;

        // 남은 시간만큼 크기를 줄여 점차적으로 효과를 줄입니다.
        float currentMagnitude = screenShake.magnitude * timeLeft;

        // 부드러운 흔들림을 위해 사인파를 사용하고 감쇠를 위해 감쇠된 크기를 곱합니다.
        float offsetX = sin(screenShake.elapsed * screenShake.frequency) * currentMagnitude;
        float offsetY = cos(screenShake.elapsed * screenShake.frequency + XM_PIDIV2) * currentMagnitude;

        // 계산된 오프셋으로 변환 행렬을 생성합니다.
        XMMATRIX shakeMatrix = XMMatrixTranslation(offsetX, offsetY, 0);

        // 현재 뷰 행렬에 곱하여 쉐이크를 적용합니다.
        viewMatrix *= shakeMatrix;

        // 경과 시간을 델타 시간만큼 증가시킵니다.
        screenShake.elapsed += deltaTime;
    } else {
        // 지속 시간이 지나면 경과 시간 초기화
        screenShake.elapsed = 0.0f;
    }
}
```

이제 흔들림과 같은 화면 흔들림을 트리거하면 다음과 같이 표시됩니다:

```cpp
// 데모용 예제 값입니다:
float shakeDuration = 1.5f; // 초
float shakeMagnitude = 3.0f; // 단위
float shakeFrequency = 10.0f; // 초당 진동수

StartScreenShake(shakeDuration, shakeMagnitude, shakeFrequency);
```

그리고 메인 업데이트 루프에서 매 프레임마다 `UpdateScreenShake`를 계속 호출하세요:

```cpp
// 메인 업데이트 루프에서:
UpdateScreenShake(deltaTime, viewMatrix);
```

이 접근 방식은 무작위 지터링보다 덜 혼란스럽고 자연스러운 흔들림 동작을 만듭니다. 사인 및 코사인 함수는 수평 및 수직 방향 모두에서 부드러운 주기적 움직임을 보장하는 동시에 시간이 지남에 따라 진폭을 점차 줄여 충격의 에너지가 소멸되는 것처럼 댐핑 효과를 만듭니다.

흔들림 지속 시간`, `흔들림 크기`, `흔들림 주파수`를 조정하면 게임에서 흔들리는 모션의 모양과 느낌을 정확하게 조정할 수 있습니다. 모션이 부드러워지더라도 과도한 흔들림은 일부 플레이어에게 불편할 수 있으므로 접근성 옵션을 제공하는 것이 좋습니다.활성화하는 옵션을 제공하는 것을 고려하세요.





===================
===================
===================
===================


일관된 진동 패턴을 만들려면 주파수를 일관되게 적용해야 합니다. 이전 예제에서 각 프레임마다 위상과 진폭을 무작위로 지정하면 혼란스럽고 부자연스러운 흔들림이 발생합니다. 대신 흔들림이 시작될 때 이러한 임의의 값을 설정한 다음 업데이트 중에 일관된 주파수를 적용해야 합니다.

화면 흔들림이 트리거될 때 초기 무작위 위상과 진폭을 설정한 다음 `UpdateScreenShake` 함수에서 일관되게 사용하여 이 문제를 해결해 보겠습니다:

먼저, 위상 및 진폭에 대한 변수를 포함하도록 `ScreenShake` 구조를 수정합니다:

```cpp
구조체 ScreenShake {
    float duration;
    float magnitude;
    float elapsed;
    float frequency;
    float phaseX; // X축의 위상 오프셋
    float phaseY; // Y축의 위상 오프셋
    float 진폭X; // X축 진폭
    float 진폭Y; // Y축 진폭
};
```

화면 흔들림을 시작할 때 이 새 변수를 임의의 값으로 초기화합니다:

```cpp
void StartScreenShake(float duration, float magnitude, float frequency) {
    screenShake.duration = duration;
    screenShake.magnitude = magnitude;
    screenShake.frequency = frequency;
    screenShake.elapsed = 0.0f;

    // 흔들기 시작 시 위상 및 진폭 무작위화
    screenShake.phaseX = static_cast<float>(rand()) / static_cast<float>(RAND_MAX) * XM_2PI;
    screenShake.phaseY = static_cast<float>(rand()) / static_cast<float>(RAND_MAX) * XM_2PI;
    screenShake.amplitudeX = 1.0f + static_cast<float>(rand()) / static_cast<float>(RAND_MAX);
    screenShake.amplitudeY = 1.0f + static_cast<float>(rand()) / static_cast<float>(RAND_MAX);
}
```

이제 이 값을 사용하도록 `UpdateScreenShake` 함수를 업데이트합니다:

```cpp
void UpdateScreenShake(float deltaTime, XMMATRIX& viewMatrix) {
    if (screenShake.elapsed < screenShake.duration) {
        // 보다 자연스러운 감쇠를 위해 부드러운 단계 함수를 사용하여 시간이 지남에 따라 흔들림 계수가 1에서 0으로 감소합니다.
        float swayFactor = 1.0f - pow(screenShake.elapsed / screenShake.duration, 2);

        // 일정한 주파수와 무작위 위상/진폭을 가진 사인파를 사용하여 흔들림 오프셋을 계산합니다.
        float time = screenShake.elapsed * screenShake.frequency;
        float offsetX = sin(time + screenShake.phaseX) * screenShake.amplitudeX * swayFactor * screenShake.magnitude;
        float offsetY = cos(time + screenShake.phaseY) * screenShake.amplitudeY * swayFactor * screenShake.magnitude;

        // 계산된 오프셋으로 변환 행렬을 생성합니다.
        XMMATRIX shakeMatrix = XMMatrixTranslation(offsetX, offsetY,